lab2Answers 
By rkoneru


1. The priority inversion problem could cause that a higher-priority process needs to wait for the completion of a lower-priority process.

(1)Priority inheritance is one approach to address this issue. Please give another approach and briefly describe its idea.

To overcome this another approach for this would be priority ceiling where the same issue can be addressed.In this approach we basically maintain the resource with a priority value which is generally higher than any of the tasks/process's priority. Then this is used to raise the priorities of processes according to the need. 
Now when a process requests for that resource and it is granted to the process(given it is  available to acquire). Then the process's priority us set to the resource priority which we already know that it is higher. 
Therefore we now have the process with highest priority. But for the implementation of this protocol we would be needing a scheduler which supports dynamic priority scheduling. 

One another approach is priority boosting approach which again runs with dynamic priority scheduling, basically the system maintains a dynamic priority apart from the base priority and this dynamic priority is lowered or increased, based on the sections the process is executing. 
For example when a process receives any messages as input then the process handling these messages is boosted with the dynamic priority and executed. Before boosting we also see define a range based on the need say with a range of process base priorities 10-30 we boost the priority else if the process base priority is within a range of 30-60 we do not boost the priority. 
Hence as we can see that by boosting the lower priority processes the priority inversion problem is addressed. 

1)
(2)

Considering a scenario where A acquires 2 semaphores say sem1 and sem2 with Prio 30 of A
Then B try to acquire sem 2 with Priority 40
Then C try to acquire sum 1 with Priority 50 
Both B and C wait in the queue and then After A release B executes and then C executes and waits for longer time in the wait queue. 
Under Xinu we have the following output , I am printing the time inside the signal function since when it comes out we get the time it was inside the queue which is found as below:

Under Xinu present Implementation 
Test 1: test the basic priority inheritence with semaphore implementation

 Start Reader A(30), then sleep 1s. 2 sems granted to Reader A  reader A: to acquire lock 1 and 2 
 reader A: acquired lock

 Start  Reader B(40), then sleep 1s. waits for A to release sem2  reader B: to acquire lock
 reader B: acquired lock

 Start  Reader C(50), then sleep 1s. waist for A to release sem1  reader C: to acquire lock
 reader A: to release lock
 reader C: acquired lock
 SEM:  
 The writer with priority 50 has been waiting in the queue for 200 reader B: to release lock
 reader C: to release lock




Here it waits for 200





Test 3: Test under the Priority Inheritance Implementation
-start reader A, then sleep 1s. reader A(prio 30) gets the lock
  Writer A: to acquire lock l1 and l2 
 Writer A: acquired lock, sleep 10s
-start reader B, then sleep 1s. reader B(prio 40) gets the lock
  Writer B: to acquire lock
-start reader C, then sleep 1s. reader C (prio 50) gets the lock
  Writer C: to acquire lock
  Writer A: to release lock1 and lock 2 
  The writer has waited for 100  Writer C: acquired lock, sleep 10s
  Writer B: acquired lock, sleep 10s
  Writer C: to release lock
  Writer B: to release lock


While we have under our new PA2 implementation we have the wait time less since priority get updated from the wait queue and makes it faster for the implementation.

Therefore it solves our problem here of not stoping higher priority process in the queue






2) 
The given code perfectly carries out the synchronization task but it comes with a shortcoming: starvation of writers. 
The code always favours readers over the writers in some scenarios and one such scenario is described below:
Suppose a writer (W1) is in its critical section(has the resource) and then there are 10 readers (R1.....R10) waiting on the same resource to
and one other writer W2 waiting on the same resource to write. 
So far, readcount = 1 and both R1 and W2 are waiting to enter the critical section.

Now, whether R1 enters the critical section first or W2 enters the critical section first completely depends on the implementation of the scheduler.
Suppose R1 enters the critical section first, as this is the first reaader it has already incremented readcount, so it just signals 
rmutex and enters the critical section. Here, in this situation there is a possibility that R2,...R10 could in a continuos, uninterrupted
manner increase the reader count and start getting executed. 
This poses a critical problem as W2 can only enter its critical section after the last reader(R10) finishes its exection
which could mean that W2 could possibly wait for a very very long time before entering its critical section i.e. suffers starvation. 
 


  
